# Find Qwt
# ~~~~~~~~
# Copyright (c) 2010, Tim Sutton <tim at linfiniti.com>
# Redistribution and use is allowed according to the terms of the BSD license.
# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
#
# Once run this will define: 
# 
# QWT_FOUND       = system has QWT lib
#
# QWT_LIBRARY     = full path to the QWT library
#
# QWT_INCLUDE_DIR      = where to find headers 
#


#MESSAGE("Searching for QWT")
find_path( QWT_INCLUDE_DIRS qwt.h 
           PATHS
             ${package_dir}/include
             ${QT_INCLUDE_DIR}
             /usr/include
             /usr/local/include
             "$ENV{LIB_DIR}/include" 
           PATH_SUFFIXES qwt-qt4 qwt
          )
find_library( QWT_LIBRARIES qwt 
              PATHS ${package_dir}/lib64
                    ${package_dir}/lib
                    ${QT_LIBRARY_DIR}
                    /usr/lib
                    /usr/local/lib
                    "$ENV{LIB_DIR}/lib" 
            )

if (QWT_INCLUDE_DIRS AND QWT_LIBRARIES)
  SET(QWT_FOUND TRUE)
endif()

if (QWT_FOUND)
  if (NOT QWT_FIND_QUIETLY)
    message(STATUS "Found QWT: ${QWT_LIBRARIES}")
  endif()
else()
  if( QWT_FIND_REQUIRED )
    message(FATAL_ERROR "Could not find QWT. Looking for: ${QWT_INCLUDE_DIRS} ${QWT_LIBRARIES} ")
  endif()
endif()

function( getUniqueModuleName knownNames )
message( "Known Names: ${${knownNames}} # ${knownNames}" )
    get_filename_component( dirName ${CMAKE_CURRENT_SOURCE_DIR} NAME )
    
    list( LENGTH ${knownNames} NElements )
    
    if( NElements EQUAL 0 )
        set( ${knownNames} ${dirName} PARENT_SCOPE )
    else()
        ########################################
        # Verify the directory name is unique.
        list( FIND ${knownNames} ${dirName} currentIndex )
        if( currentIndex GREATER -1 )
            message( FATAL_ERROR "The directory name " ${dirName} " was found associated with more than 1 directory" )
        endif()

        set( ${knownNames} "${${knownNames}};${dirName}" PARENT_SCOPE )
    endif()

    set( localName ${dirName} PARENT_SCOPE )
endfunction()

function( setModuleName )
    get_filename_component( dirName ${CMAKE_CURRENT_SOURCE_DIR} NAME )
    set( localName ${dirName} PARENT_SCOPE )
endfunction()

function( addCMakeDirs )

    ########################################
    #  Subdirectories containing CMakeLists.txt files
    file( GLOB SubCMakes RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "*/CMakeLists.txt" )

    # Allow caller to specify directories that will not be included
    foreach( subdir ${ExcludeSrcDirectories} )
        message( "Under ${localName} -- excluding directory: ${subdir}" )
        list( REMOVE_ITEM SubCMakes ${subdir}/CMakeLists.txt )
    endforeach()
    
    foreach( subCMake ${SubCMakes} )
        get_filename_component( dirName ${subCMake} PATH )
        add_subdirectory( ${dirName} )
    endforeach()

endfunction()

function( handleConfiguredFiles )
    # Sources that have to be generated by CMake
    file( GLOB configFiles RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "*.in" )
    foreach( cFile ${configFiles} )
        string( REPLACE ".in" " " resultFile ${cFile} )
        message( "Configuring : ${cFile} and ${resultFile}" )
        configure_file( ${cFile} ${resultFile} )
    endforeach()
endfunction()
